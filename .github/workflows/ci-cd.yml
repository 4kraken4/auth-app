name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - master

jobs:
  # Stage 1: Code Checkout and Validation (runs on all branches)
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # Checkout code from repository
      - name: Run linters or static analysis tools (optional)
        run: | # using npm
          npm install
          npm run lint

  # Stage 2: Unit Tests (runs on all branches)
  unit-tests:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v3 # Checkout code again (optional)
      - name: Run unit tests
        run: | # using Jest
          npm install
          npm test

  # Stage 3: Integration Tests and Build (runs on pull request merge or push to master)
  build-and-integration-tests:
    runs-on: ubuntu-latest
    needs: [checkout, unit-tests]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.base_ref == 'master')
    steps:
      - uses: actions/checkout@v3 # Checkout code again (optional)
      - name: Build artifacts
        run: | # using npm run build
          npm install
          npm run build
      - name: Run integration tests (if applicable)
        run: | # using Jest
          npm test:integration

#   # Stage 4: Deployment (environment-specific)
#   deploy-to-test:
#     runs-on: ubuntu-latest
#     needs: build-and-integration-tests
#     if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.base_ref == 'master')
#     env:
#       TEST_DEPLOY_TOKEN: ${{ secrets.TEST_DEPLOY_TOKEN }} # Access token with limited permissions
#     steps:
#       - name: Deploy to test environment
#         run: | # Replace with your deployment method (e.g., scp)
#           scp -o StrictHostKeyChecking=no -r build_artifacts/* user@test_server:/path/to/deployment/directory

#   # Stage 5: Production Deployment (highly secure, manual approval required)
#   deploy-to-production:
#     runs-on: ubuntu-latest
#     needs: build-and-integration-tests
#     if: github.event_name == 'pull_request' && github.event.action == 'closed' && contains(github.event.pull_request.labels.*.name, 'approved')
#     env:
#       PRODUCTION_DEPLOY_TOKEN: ${{ secrets.PRODUCTION_DEPLOY_TOKEN }} # Access token with limited permissions
#     steps:
#       - name: Deploy to production environment
#         run: | # Replace with your deployment method (e.g., scp)
#           scp -o StrictHostKeyChecking=no -r build_artifacts/* user@production_server:/path/to/deployment/directory
